openapi: 3.0.3
info:
  title: User specification
  description: Specification with user management operations and roles (only for admin)
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
paths:
  /api/users:
    get:
      description: |
        Endpoint used for getting users
      tags:
        - "User"
      operationId: getUsers
      parameters:
        - name: page
          in: query
          required: false
          allowEmptyValue: true
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          allowEmptyValue: true
          schema:
            type: integer
            default: 10
        - name: phrase
          in: query
          required: false
          allowEmptyValue: true
          schema:
            type: string
      responses:
        "200":
          description: Ok. Successful response will return list of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageUser"
    post:
      description: |
        Endpoint for adding new users
      tags:
        - "User"
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Ok. Successful response will return created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /api/users/{id}:
    get:
      description: |
        Endpoint for getting user by id
      tags:
        - "User"
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Ok. Successful response will return requested user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserData"
    patch:
      description: |
        Endpoint for editing existing user
      tags:
        - "User"
      operationId: editUser
      parameters:
        - name: id
          in: path
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserData"
      responses:
        "200":
          description: Ok. Successful response will return edited user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserData"
    delete:
      description: |
        Endpoint for deleting user
      tags:
        - "User"
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Ok. User successfully deleted
  /api/users/{id}/subscriptions:
    description: |
      Endpoint used for getting user subscriptions
    get:
      tags:
        - "User"
      operationId: getUserSubscriptions
      parameters:
        - name: id
          in: path
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: false
          allowEmptyValue: true
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          allowEmptyValue: true
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Ok. Successful response will return ok status and list of subscribed dancing teams
          content:
            application/json:
              schema:
                $ref: "dancing-team-specification.yaml#/components/schemas/PageDancingTeamListElement"
  /api/users/register-user:
    description: |
      Endpoint used for registering normal user
    post:
      tags:
        - "User"
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserRequest"
      responses:
        "200":
          description: Ok. Successful response will return ok status
  /api/users/register-as-dancing-team:
    description: |
      Endpoint used for registering dancing team account
    post:
      tags:
        - "User"
      operationId: registerAsDancingTeam
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/RegisterDancingTeamAccountRequest"
      responses:
        "200":
          description: Ok. Successful response will return ok status
  /api/users/login:
    description: |
      Endpoint used for logging-in users
    post:
      tags:
        - "User"
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Ok. Successful response will return ok status and tokens in response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
  /api/users/refresh-token:
    description: |
      Endpoint used for refreshing token
    post:
      tags:
        - "User"
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        "200":
          description: Ok. Successful response will return ok status and refreshed token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenResponse"
  /api/users/{id}/device-token/{token}/{deviceType}:
    post:
      description: |
        Endpoint used for assigning device token to account
      tags:
        - "User"
      operationId: addDeviceToken
      parameters:
        - name: token
          in: path
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: deviceType
          in: path
          required: true
          allowEmptyValue: false
          schema:
            type: string
      responses:
        "200":
          description: Ok. Successful response will return ok status and token has saved
        "201":
          description: Ok. Successful response will return ok status and token is already in database
    delete:
      description: |
        Endpoint used for deleting user token
      tags:
        - "User"
      operationId: deleteDeviceToken
      parameters:
        - name: token
          in: path
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: deviceType
          in: path
          required: true
          allowEmptyValue: false
          schema:
            type: string
      responses:
        "200":
          description: Ok. Successful response will return ok status and token has deleted
components:
  schemas:
    RegisterUserRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        wantReceiveEmailNotifications:
          type: boolean
          default: false
        wantReceivePushNotifications:
          type: boolean
          default: false
    RegisterDancingTeamAccountRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        teamName:
          type: string
        teamDescription:
          type: string
          nullable: true
        creationYear:
          type: integer
        regionId:
          type: integer
          format: int64
        city:
          type: string
        street:
          type: string
        houseNumber:
          type: string
        logo:
          type: string
          format: binary
          nullable: true
        banner:
          type: string
          format: binary
          nullable: true
        wantReceiveEmailNotifications:
          type: boolean
          nullable: false
        wantReceivePushNotifications:
          type: boolean
          default: false
    UserData:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        userType:
          type: string
        userRoles:
          type: array
          items:
            $ref: "#/components/schemas/UserRole"
        wantReceiveEmailNotifications:
          type: boolean
          default: false
        wantReceivePushNotifications:
          type: boolean
          default: false
    UserRole:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        dancingTeamId:
          type: integer
          format: int64
          nullable: true
    DancingTeamData:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        teamName:
          type: string
        teamDescription:
          type: string
        creationYear:
          type: integer
        regionId:
          type: integer
          format: int64
        city:
          type: string
        street:
          type: string
        houseNumber:
          type: string
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        idToken:
          type: string
        refreshToken:
          type: string
        userData:
          $ref: "#/components/schemas/UserData"
        dancingTeamData:
          type: array
          nullable: true
          items:
            $ref: "dancing-team-specification.yaml#/components/schemas/DancingTeamListElement"
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
    RefreshTokenResponse:
      type: object
      properties:
        token:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        brithDate:
          type: string
          format: date
        howLongDancing:
          type: integer
        dances:
          type: array
          items:
            $ref: "dance-specification.yaml#/components/schemas/Dance"
        howLongPlayingInstruments:
          type: integer
        instruments:
          type: array
          items:
            $ref: "music-instrument-specification.yaml#/components/schemas/MusicInstrument"
        #        role:
        #          $ref: "#/components/schemas/Role"
        userType:
          type: string
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    PageUser:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/User"
        pageable:
          type: object
          properties:
            pageNumber:
              type: integer
            pageSize:
              type: integer
            offset:
              type: integer
        totalPages:
          type: integer
        totalElements:
          type: integer
        last:
          type: boolean
        first:
          type: boolean
        numberOfElements:
          type: integer

  
